// <auto-generated />
using System;
using Boutique.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Boutique.Migrations
{
    [DbContext(typeof(BoutiqueDbContext))]
    [Migration("20211123053559_Migration6")]
    partial class Migration6
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Boutique.Models.Commande", b =>
                {
                    b.Property<int>("CommandeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmployePersonneId")
                        .HasColumnType("int");

                    b.Property<string>("dateCommande")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dateLivraison")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommandeId");

                    b.HasIndex("EmployePersonneId");

                    b.ToTable("Commandes");
                });

            modelBuilder.Entity("Boutique.Models.Livraison", b =>
                {
                    b.Property<int>("LivraisonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmployePersonneId")
                        .HasColumnType("int");

                    b.Property<string>("adresseLivraison")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LivraisonId");

                    b.HasIndex("EmployePersonneId");

                    b.ToTable("Livraisons");
                });

            modelBuilder.Entity("Boutique.Models.Personne", b =>
                {
                    b.Property<int>("PersonneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Addresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telephone")
                        .HasColumnType("int");

                    b.HasKey("PersonneId");

                    b.ToTable("Personnes");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Personne");
                });

            modelBuilder.Entity("Boutique.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientPersonneId")
                        .HasColumnType("int");

                    b.Property<int?>("CommandeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ProductPrice")
                        .HasColumnType("real");

                    b.Property<string>("ProductType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StockId")
                        .HasColumnType("int");

                    b.Property<int?>("VenteId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("ClientPersonneId");

                    b.HasIndex("CommandeId");

                    b.HasIndex("StockId");

                    b.HasIndex("VenteId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Boutique.Models.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("StockId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Boutique.Models.Vente", b =>
                {
                    b.Property<int>("VenteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientPersonneId")
                        .HasColumnType("int");

                    b.Property<int>("Mode_payment")
                        .HasColumnType("int");

                    b.Property<float>("Montant")
                        .HasColumnType("real");

                    b.HasKey("VenteId");

                    b.HasIndex("ClientPersonneId");

                    b.ToTable("Ventes");
                });

            modelBuilder.Entity("CommandeFournisseur", b =>
                {
                    b.Property<int>("CommandesCommandeId")
                        .HasColumnType("int");

                    b.Property<int>("FournisseursPersonneId")
                        .HasColumnType("int");

                    b.HasKey("CommandesCommandeId", "FournisseursPersonneId");

                    b.HasIndex("FournisseursPersonneId");

                    b.ToTable("CommandeFournisseur");
                });

            modelBuilder.Entity("FournisseurProduct", b =>
                {
                    b.Property<int>("FournisseursPersonneId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsProductId")
                        .HasColumnType("int");

                    b.HasKey("FournisseursPersonneId", "ProductsProductId");

                    b.HasIndex("ProductsProductId");

                    b.ToTable("FournisseurProduct");
                });

            modelBuilder.Entity("LivraisonProduct", b =>
                {
                    b.Property<int>("LivraisonsLivraisonId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsProductId")
                        .HasColumnType("int");

                    b.HasKey("LivraisonsLivraisonId", "ProductsProductId");

                    b.HasIndex("ProductsProductId");

                    b.ToTable("LivraisonProduct");
                });

            modelBuilder.Entity("Boutique.Models.Client", b =>
                {
                    b.HasBaseType("Boutique.Models.Personne");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("Boutique.Models.Employe", b =>
                {
                    b.HasBaseType("Boutique.Models.Personne");

                    b.Property<int>("EmployeId")
                        .HasColumnType("int");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("StockId")
                        .IsUnique()
                        .HasFilter("[StockId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Employe");
                });

            modelBuilder.Entity("Boutique.Models.Fournisseur", b =>
                {
                    b.HasBaseType("Boutique.Models.Personne");

                    b.Property<int>("FournisseurId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Fournisseur");
                });

            modelBuilder.Entity("Boutique.Models.Commande", b =>
                {
                    b.HasOne("Boutique.Models.Employe", "Employe")
                        .WithMany("Commandes")
                        .HasForeignKey("EmployePersonneId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Employe");
                });

            modelBuilder.Entity("Boutique.Models.Livraison", b =>
                {
                    b.HasOne("Boutique.Models.Employe", "Employe")
                        .WithMany("Livraisons")
                        .HasForeignKey("EmployePersonneId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Employe");
                });

            modelBuilder.Entity("Boutique.Models.Product", b =>
                {
                    b.HasOne("Boutique.Models.Client", "Client")
                        .WithMany("Products")
                        .HasForeignKey("ClientPersonneId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Boutique.Models.Commande", "Commande")
                        .WithMany("Products")
                        .HasForeignKey("CommandeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Boutique.Models.Stock", "Stock")
                        .WithMany("Products")
                        .HasForeignKey("StockId");

                    b.HasOne("Boutique.Models.Vente", "Vente")
                        .WithMany("Products")
                        .HasForeignKey("VenteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Client");

                    b.Navigation("Commande");

                    b.Navigation("Stock");

                    b.Navigation("Vente");
                });

            modelBuilder.Entity("Boutique.Models.Vente", b =>
                {
                    b.HasOne("Boutique.Models.Client", "Client")
                        .WithMany("Ventes")
                        .HasForeignKey("ClientPersonneId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Client");
                });

            modelBuilder.Entity("CommandeFournisseur", b =>
                {
                    b.HasOne("Boutique.Models.Commande", null)
                        .WithMany()
                        .HasForeignKey("CommandesCommandeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boutique.Models.Fournisseur", null)
                        .WithMany()
                        .HasForeignKey("FournisseursPersonneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FournisseurProduct", b =>
                {
                    b.HasOne("Boutique.Models.Fournisseur", null)
                        .WithMany()
                        .HasForeignKey("FournisseursPersonneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boutique.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LivraisonProduct", b =>
                {
                    b.HasOne("Boutique.Models.Livraison", null)
                        .WithMany()
                        .HasForeignKey("LivraisonsLivraisonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boutique.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Boutique.Models.Employe", b =>
                {
                    b.HasOne("Boutique.Models.Stock", "Stock")
                        .WithOne("Employe")
                        .HasForeignKey("Boutique.Models.Employe", "StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Boutique.Models.Commande", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Boutique.Models.Stock", b =>
                {
                    b.Navigation("Employe");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Boutique.Models.Vente", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Boutique.Models.Client", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Ventes");
                });

            modelBuilder.Entity("Boutique.Models.Employe", b =>
                {
                    b.Navigation("Commandes");

                    b.Navigation("Livraisons");
                });
#pragma warning restore 612, 618
        }
    }
}
