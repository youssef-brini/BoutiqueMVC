// <auto-generated />
using System;
using Boutique.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Boutique.Migrations
{
    [DbContext(typeof(BoutiqueDbContext))]
    [Migration("20211123072539_Migration10")]
    partial class Migration10
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Boutique.Models.Commande", b =>
                {
                    b.Property<int>("CommandeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmployePersonneId")
                        .HasColumnType("int");

                    b.Property<string>("dateCommande")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dateLivraison")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommandeId");

                    b.HasIndex("EmployePersonneId");

                    b.ToTable("Commandes");
                });

            modelBuilder.Entity("Boutique.Models.FournisseurCommande", b =>
                {
                    b.Property<int>("FournisseurCommandeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommandeId")
                        .HasColumnType("int");

                    b.Property<int>("FournisseurId")
                        .HasColumnType("int");

                    b.HasKey("FournisseurCommandeId");

                    b.HasIndex("CommandeId");

                    b.HasIndex("FournisseurId");

                    b.ToTable("FournisseurCommande");
                });

            modelBuilder.Entity("Boutique.Models.Livraison", b =>
                {
                    b.Property<int>("LivraisonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmployePersonneId")
                        .HasColumnType("int");

                    b.Property<string>("adresseLivraison")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LivraisonId");

                    b.HasIndex("EmployePersonneId");

                    b.ToTable("Livraisons");
                });

            modelBuilder.Entity("Boutique.Models.Personne", b =>
                {
                    b.Property<int>("PersonneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Addresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telephone")
                        .HasColumnType("int");

                    b.HasKey("PersonneId");

                    b.ToTable("Personnes");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Personne");
                });

            modelBuilder.Entity("Boutique.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientPersonneId")
                        .HasColumnType("int");

                    b.Property<int?>("CommandeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ProductPrice")
                        .HasColumnType("real");

                    b.Property<string>("ProductType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StockId")
                        .HasColumnType("int");

                    b.Property<int?>("VenteId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("ClientPersonneId");

                    b.HasIndex("CommandeId");

                    b.HasIndex("StockId");

                    b.HasIndex("VenteId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Boutique.Models.ProductFournisseur", b =>
                {
                    b.Property<int>("ProductFournisseurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FournisseurId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductFournisseurId");

                    b.HasIndex("FournisseurId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductFournisseur");
                });

            modelBuilder.Entity("Boutique.Models.ProductLivraison", b =>
                {
                    b.Property<int>("ProductLivraisonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LivraisonId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductLivraisonId");

                    b.HasIndex("LivraisonId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductLivraison");
                });

            modelBuilder.Entity("Boutique.Models.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("StockId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Boutique.Models.Vente", b =>
                {
                    b.Property<int>("VenteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientPersonneId")
                        .HasColumnType("int");

                    b.Property<int>("Mode_payment")
                        .HasColumnType("int");

                    b.Property<float>("Montant")
                        .HasColumnType("real");

                    b.HasKey("VenteId");

                    b.HasIndex("ClientPersonneId");

                    b.ToTable("Ventes");
                });

            modelBuilder.Entity("Boutique.Models.Client", b =>
                {
                    b.HasBaseType("Boutique.Models.Personne");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("Boutique.Models.Employe", b =>
                {
                    b.HasBaseType("Boutique.Models.Personne");

                    b.Property<int>("EmployeId")
                        .HasColumnType("int");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("StockId")
                        .IsUnique()
                        .HasFilter("[StockId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Employe");
                });

            modelBuilder.Entity("Boutique.Models.Fournisseur", b =>
                {
                    b.HasBaseType("Boutique.Models.Personne");

                    b.Property<int>("FournisseurId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Fournisseur");
                });

            modelBuilder.Entity("Boutique.Models.Commande", b =>
                {
                    b.HasOne("Boutique.Models.Employe", "Employe")
                        .WithMany("Commandes")
                        .HasForeignKey("EmployePersonneId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Employe");
                });

            modelBuilder.Entity("Boutique.Models.FournisseurCommande", b =>
                {
                    b.HasOne("Boutique.Models.Commande", "Commande")
                        .WithMany("FournisseursCommandes")
                        .HasForeignKey("CommandeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boutique.Models.Fournisseur", "Fournisseur")
                        .WithMany("FournisseursCommandes")
                        .HasForeignKey("FournisseurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commande");

                    b.Navigation("Fournisseur");
                });

            modelBuilder.Entity("Boutique.Models.Livraison", b =>
                {
                    b.HasOne("Boutique.Models.Employe", "Employe")
                        .WithMany("Livraisons")
                        .HasForeignKey("EmployePersonneId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Employe");
                });

            modelBuilder.Entity("Boutique.Models.Product", b =>
                {
                    b.HasOne("Boutique.Models.Client", "Client")
                        .WithMany("Products")
                        .HasForeignKey("ClientPersonneId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Boutique.Models.Commande", "Commande")
                        .WithMany("Products")
                        .HasForeignKey("CommandeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Boutique.Models.Stock", "Stock")
                        .WithMany("Products")
                        .HasForeignKey("StockId");

                    b.HasOne("Boutique.Models.Vente", "Vente")
                        .WithMany("Products")
                        .HasForeignKey("VenteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Client");

                    b.Navigation("Commande");

                    b.Navigation("Stock");

                    b.Navigation("Vente");
                });

            modelBuilder.Entity("Boutique.Models.ProductFournisseur", b =>
                {
                    b.HasOne("Boutique.Models.Fournisseur", "Fournisseur")
                        .WithMany("ProductsFournisseurs")
                        .HasForeignKey("FournisseurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boutique.Models.Product", "Product")
                        .WithMany("ProductsFournisseurs")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fournisseur");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Boutique.Models.ProductLivraison", b =>
                {
                    b.HasOne("Boutique.Models.Livraison", "Livraison")
                        .WithMany("ProductsLivraisons")
                        .HasForeignKey("LivraisonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boutique.Models.Product", "Product")
                        .WithMany("ProductsLivraisons")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Livraison");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Boutique.Models.Vente", b =>
                {
                    b.HasOne("Boutique.Models.Client", "Client")
                        .WithMany("Ventes")
                        .HasForeignKey("ClientPersonneId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Boutique.Models.Employe", b =>
                {
                    b.HasOne("Boutique.Models.Stock", "Stock")
                        .WithOne("Employe")
                        .HasForeignKey("Boutique.Models.Employe", "StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Boutique.Models.Commande", b =>
                {
                    b.Navigation("FournisseursCommandes");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Boutique.Models.Livraison", b =>
                {
                    b.Navigation("ProductsLivraisons");
                });

            modelBuilder.Entity("Boutique.Models.Product", b =>
                {
                    b.Navigation("ProductsFournisseurs");

                    b.Navigation("ProductsLivraisons");
                });

            modelBuilder.Entity("Boutique.Models.Stock", b =>
                {
                    b.Navigation("Employe");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Boutique.Models.Vente", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Boutique.Models.Client", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Ventes");
                });

            modelBuilder.Entity("Boutique.Models.Employe", b =>
                {
                    b.Navigation("Commandes");

                    b.Navigation("Livraisons");
                });

            modelBuilder.Entity("Boutique.Models.Fournisseur", b =>
                {
                    b.Navigation("FournisseursCommandes");

                    b.Navigation("ProductsFournisseurs");
                });
#pragma warning restore 612, 618
        }
    }
}
